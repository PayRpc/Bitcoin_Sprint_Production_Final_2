# Bitcoin Sprint Multi-Chain Relay Platform
# Docker Compose configuration for enterprise-grade blockchain infrastructure

networks:
  sprint-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.65.0/24

volumes:
  bitcoin-data:
  ethereum-data:
  solana-data:
  solana-data-2:
  solana-data-3:
  solana-data-4:
  solana-data-5:
  solana-data-6:
  solana-data-7:
  redis-data:
  nginx_logs:
  postgres-data:
  prometheus-data:
  grafana-data:

services:
  # ===== MONITORING =====
  grafana:
    image: grafana/grafana:11.1.0
    container_name: sprint-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sprint123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - sprint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - prometheus

  # ===== RUST WEB SERVER (HARDENED) =====
  bitcoin-sprint-rust:
    build:
      context: ..
      dockerfile: Dockerfile.rust
    container_name: bitcoin-sprint-rust
    ports:
      - "8443:8443"     # HTTPS API
      - "8444:8444"     # HTTPS Admin API
      - "9093:9092"     # Prometheus Metrics (changed to avoid conflict)
    environment:
      - RUST_LOG=info
      - TLS_CERT_PATH=/app/config/tls/cert.pem
      - TLS_KEY_PATH=/app/config/tls/key.pem
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_PORT=9092
      - API_HOST=0.0.0.0
      - API_PORT=8443
      - ADMIN_PORT=8444
      - STORAGE_VERIFICATION_ENABLED=true
      - ENTERPRISE_MODE=true
    volumes:
      - ./config/tls:/app/config/tls:ro
    depends_on:
      - redis
      - bitcoin-sprint
    networks:
      - sprint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  bitcoin-sprint:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: bitcoin-sprint-core
    ports:
      - "8082:8080"     # Main API (changed from 8080 to avoid conflict)
      - "8083:8081"     # Admin API (changed from 8081 to avoid conflict)
      # - "9090:9090"     # Metrics - internal only, accessed via Docker network
      - "6061:6060"     # pprof debugging (changed from 6060 to avoid conflict)
    environment:
      - SPRINT_TIER=enterprise
      - SPRINT_API_HOST=0.0.0.0
      - SPRINT_API_PORT=8080
      - SPRINT_ADMIN_PORT=8081
      - SPRINT_METRICS_PORT=9090     # Updated to match actual port
      - SPRINT_LICENSE_KEY=ENTERPRISE-FULL-FEATURES-ACTIVE
      - SPRINT_TURBO_MODE=true
      - SPRINT_ENTERPRISE_FEATURES=true
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgres://sprint:sprint@postgres:5432/sprint_db
    depends_on:
      - redis
      - postgres
    networks:
      - sprint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== BITCOIN INFRASTRUCTURE =====
  bitcoin-core:
    image: bitcoin/bitcoin:latest
    container_name: bitcoin-core
    ports:
      - "8332:8332"     # RPC
      - "8333:8333"     # P2P
      - "28332:28332"   # ZMQ block notifications
      - "28333:28333"   # ZMQ tx notifications
    volumes:
      - bitcoin-data:/home/bitcoin/.bitcoin
      - ./bitcoin.conf:/home/bitcoin/.bitcoin/bitcoin.conf
    command: |
      bitcoind
      -printtoconsole
      -conf=/home/bitcoin/.bitcoin/bitcoin.conf
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== FAST SYNC BITCOIN NODE =====
  bitcoin-core-fast:
    image: bitcoin/bitcoin:latest
    container_name: bitcoin-core-fast
    profiles: ["fast-sync"]
    ports:
      - "8334:8332"     # RPC (changed to avoid conflict)
      - "8335:8333"     # P2P (changed to avoid conflict)
      - "28334:28332"   # ZMQ block notifications
      - "28335:28333"   # ZMQ tx notifications
    volumes:
      - bitcoin-data:/home/bitcoin/.bitcoin
      - ./bitcoin.conf:/home/bitcoin/.bitcoin/bitcoin.conf:ro
    command: |
      bitcoind
      -printtoconsole
      -conf=/home/bitcoin/.bitcoin/bitcoin.conf
      -connect=seed.bitcoin.sipa.be
      -connect=dnsseed.bluematt.me
      -connect=dnsseed.bitcoin.dashjr.org
      -connect=seed.bitcoinstats.com
    networks:
      - sprint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bitcoin-cli", "-rpcuser=sprint", "-rpcpassword=sprint_password_2025", "getblockchaininfo"]
      interval: 60s
      timeout: 30s
      retries: 3

  # ===== ULTRA FAST BITCOIN NODE =====
  bitcoin-core-ultra:
    image: bitcoin/bitcoin:latest
    container_name: bitcoin-core-ultra
    profiles: ["ultra-fast"]
    ports:
      - "8334:8332"     # RPC
      - "8335:8333"     # P2P
      - "28334:28332"   # ZMQ block notifications
      - "28335:28333"   # ZMQ tx notifications
    volumes:
      - bitcoin-data:/home/bitcoin/.bitcoin
      - ./bitcoin.conf:/home/bitcoin/.bitcoin/bitcoin.conf:ro
    command: |
      bitcoind
      -printtoconsole
      -conf=/home/bitcoin/.bitcoin/bitcoin.conf
      -assumevalid=00000000000000000008a89e7d3806a2c0b73e4d4bc8f4e8c3e8a8b0
      -connect=seed.bitcoin.sipa.be
      -connect=dnsseed.bluematt.me
      -maxconnections=8
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== BITCOIN NODE WITH EXTERNAL SNAPSHOT =====
  bitcoin-core-snapshot:
    image: bitcoin/bitcoin:latest
    container_name: bitcoin-core-snapshot
    profiles: ["snapshot"]
    ports:
      - "8334:8332"     # RPC
      - "8335:8333"     # P2P
      - "28334:28332"   # ZMQ block notifications
      - "28335:28333"   # ZMQ tx notifications
    volumes:
      - bitcoin-data:/home/bitcoin/.bitcoin
      - ./bitcoin.conf:/home/bitcoin/.bitcoin/bitcoin.conf:ro
      - ./data/bitcoin-snapshot:/snapshot:ro
    command: |
      bitcoind
      -printtoconsole
      -conf=/home/bitcoin/.bitcoin/bitcoin.conf
      -loadblock=/snapshot/blocks
      -loadtxindex=/snapshot/chainstate
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== LIGHTNING FAST BITCOIN NODE =====
  bitcoin-core-lightning:
    image: bitcoin/bitcoin:latest
    container_name: bitcoin-core-lightning
    profiles: ["lightning"]
    ports:
      - "8334:8332"     # RPC
      - "8335:8333"     # P2P
      - "28334:28332"   # ZMQ block notifications
      - "28335:28333"   # ZMQ tx notifications
    volumes:
      - bitcoin-data:/home/bitcoin/.bitcoin
      - ./bitcoin-lightning.conf:/home/bitcoin/.bitcoin/bitcoin.conf:ro
    command: |
      bitcoind
      -printtoconsole
      -conf=/home/bitcoin/.bitcoin/bitcoin.conf
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== BITCOIN METRICS EXPORTER =====
  bitcoin-exporter:
    build:
      context: .
      dockerfile: Dockerfile.bitcoin-exporter
    container_name: bitcoin-exporter
    ports:
      - "8084:8080"     # Metrics exporter (changed from 8082 to avoid bitcoin-sprint conflict)
    environment:
      - RPC_HOST=bitcoin-core
      - RPC_PORT=8332
      - RPC_USER=sprint
      - RPC_PASSWORD=sprint_password_2025
    depends_on:
      - redis
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== ETHEREUM INFRASTRUCTURE =====
  geth:
    image: ethereum/client-go:v1.13.5
    container_name: ethereum-geth
    ports:
      - "8545:8545"     # HTTP RPC
      - "8546:8546"     # WebSocket RPC
      - "30303:30303"   # P2P
      - "6061:6060"     # Metrics (changed to avoid conflict)
    volumes:
      - ethereum-data:/root/.ethereum
    command: |
      --http
      --http.addr=0.0.0.0
      --http.port=8545
      --http.api=eth,net,web3,personal,admin,debug
      --http.corsdomain="*"
      --ws
      --ws.addr=0.0.0.0
      --ws.port=8546
      --ws.api=eth,net,web3,personal,admin,debug
      --ws.origins="*"
      --syncmode=snap
      --cache=2048
      --metrics
      --metrics.addr=0.0.0.0
      --metrics.port=6060
      --metrics.expensive
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== SOLANA INFRASTRUCTURE =====
  solana-validator:
    image: solanalabs/solana:v1.16.0
    container_name: solana-validator
    ports:
      - "8899:8899"     # RPC
      - "8900:8900"     # WebSocket
      - "9900:9900"     # Gossip
      - "9092:9091"     # Metrics (Prometheus) - Changed from 9091 to avoid conflict
    volumes:
      - solana-data:/root/.config/solana
    environment:
      - SOLANA_METRICS_CONFIG=host=http://0.0.0.0:9091
    command: |
      solana-test-validator
      --rpc-bind-address=0.0.0.0
      --rpc-port=8899
      --websocket-url=ws://0.0.0.0:8900
      --gossip-port=9900
      --ledger=/root/.config/solana/test-ledger
      --reset
      --log
      --accounts-db-cache-size-mb=1024
      --enable-rpc-transaction-history
      --rpc-pubsub-enable-block-subscription
      --rpc-pubsub-enable-account-subscription
    networks:
      - sprint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8899/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Additional Solana Validators for multi-validator testnet
  solana-validator-2:
    image: solanalabs/solana:v1.16.0
    container_name: solana-validator-2
    ports:
      - "9901:9901"     # Gossip port
      - "8901:8901"     # WebSocket
    volumes:
      - solana-data-2:/root/.config/solana
    environment:
      - SOLANA_METRICS_CONFIG=host=http://0.0.0.0:9091
    command: |
      solana-test-validator
      --rpc-bind-address=0.0.0.0
      --rpc-port=8899
      --websocket-url=ws://0.0.0.0:8901
      --gossip-port=9901
      --ledger=/root/.config/solana/test-ledger-2
      --reset
      --log
      --accounts-db-cache-size-mb=512
      --entrypoint=solana-validator:9900
      --gossip-host=solana-validator-2
    depends_on:
      - solana-validator
    networks:
      - sprint-network
    restart: unless-stopped

  solana-validator-3:
    image: solanalabs/solana:v1.16.0
    container_name: solana-validator-3
    ports:
      - "9902:9902"     # Gossip port
      - "8902:8902"     # WebSocket
    volumes:
      - solana-data-3:/root/.config/solana
    environment:
      - SOLANA_METRICS_CONFIG=host=http://0.0.0.0:9091
    command: |
      solana-test-validator
      --rpc-bind-address=0.0.0.0
      --rpc-port=8899
      --websocket-url=ws://0.0.0.0:8902
      --gossip-port=9902
      --ledger=/root/.config/solana/test-ledger-3
      --reset
      --log
      --accounts-db-cache-size-mb=512
      --entrypoint=solana-validator:9900
      --gossip-host=solana-validator-3
    depends_on:
      - solana-validator
    networks:
      - sprint-network
    restart: unless-stopped

  solana-validator-4:
    image: solanalabs/solana:v1.16.0
    container_name: solana-validator-4
    ports:
      - "9903:9903"     # Gossip port
      - "8903:8903"     # WebSocket
    volumes:
      - solana-data-4:/root/.config/solana
    environment:
      - SOLANA_METRICS_CONFIG=host=http://0.0.0.0:9091
    command: |
      solana-test-validator
      --rpc-bind-address=0.0.0.0
      --rpc-port=8899
      --websocket-url=ws://0.0.0.0:8903
      --gossip-port=9903
      --ledger=/root/.config/solana/test-ledger-4
      --reset
      --log
      --accounts-db-cache-size-mb=512
      --entrypoint=solana-validator:9900
      --gossip-host=solana-validator-4
    depends_on:
      - solana-validator
    networks:
      - sprint-network
    restart: unless-stopped

  solana-validator-5:
    image: solanalabs/solana:v1.16.0
    container_name: solana-validator-5
    ports:
      - "9904:9904"     # Gossip port
      - "8904:8904"     # WebSocket
    volumes:
      - solana-data-5:/root/.config/solana
    environment:
      - SOLANA_METRICS_CONFIG=host=http://0.0.0.0:9091
    command: |
      solana-test-validator
      --rpc-bind-address=0.0.0.0
      --rpc-port=8899
      --websocket-url=ws://0.0.0.0:8904
      --gossip-port=9904
      --ledger=/root/.config/solana/test-ledger-5
      --reset
      --log
      --accounts-db-cache-size-mb=512
      --entrypoint=solana-validator:9900
      --gossip-host=solana-validator-5
    depends_on:
      - solana-validator
    networks:
      - sprint-network
    restart: unless-stopped

  solana-validator-6:
    image: solanalabs/solana:v1.16.0
    container_name: solana-validator-6
    ports:
      - "9905:9905"     # Gossip port
      - "8905:8905"     # WebSocket
    volumes:
      - solana-data-6:/root/.config/solana
    environment:
      - SOLANA_METRICS_CONFIG=host=http://0.0.0.0:9091
    command: |
      solana-test-validator
      --rpc-bind-address=0.0.0.0
      --rpc-port=8899
      --websocket-url=ws://0.0.0.0:8905
      --gossip-port=9905
      --ledger=/root/.config/solana/test-ledger-6
      --reset
      --log
      --accounts-db-cache-size-mb=512
      --entrypoint=solana-validator:9900
      --gossip-host=solana-validator-6
    depends_on:
      - solana-validator
    networks:
      - sprint-network
    restart: unless-stopped

  solana-validator-7:
    image: solanalabs/solana:v1.16.0
    container_name: solana-validator-7
    ports:
      - "9906:9906"     # Gossip port
      - "8906:8906"     # WebSocket
    volumes:
      - solana-data-7:/root/.config/solana
    environment:
      - SOLANA_METRICS_CONFIG=host=http://0.0.0.0:9091
    command: |
      solana-test-validator
      --rpc-bind-address=0.0.0.0
      --rpc-port=8899
      --websocket-url=ws://0.0.0.0:8906
      --gossip-port=9906
      --ledger=/root/.config/solana/test-ledger-7
      --reset
      --log
      --accounts-db-cache-size-mb=512
      --entrypoint=solana-validator:9900
      --gossip-host=solana-validator-7
    depends_on:
      - solana-validator
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== SOLANA METRICS EXPORTER =====
  solana-exporter:
    build:
      context: .
      dockerfile: Dockerfile.solana-exporter
    container_name: solana-exporter
    ports:
      - "8082:8080"     # Metrics exporter
    environment:
      - SOLANA_RPC_URL=http://solana-validator:8899
      - SOLANA_RPC_URL_2=http://solana-validator-2:8899
      - SOLANA_RPC_URL_3=http://solana-validator-3:8899
      - SOLANA_RPC_URL_4=http://solana-validator-4:8899
      - SOLANA_RPC_URL_5=http://solana-validator-5:8899
      - SOLANA_RPC_URL_6=http://solana-validator-6:8899
      - SOLANA_RPC_URL_7=http://solana-validator-7:8899
      - METRICS_PORT=8080
      - UPDATE_INTERVAL=30s
    depends_on:
      - solana-validator
      - solana-validator-2
      - solana-validator-3
      - solana-validator-4
      - solana-validator-5
      - solana-validator-6
      - solana-validator-7
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== SOLANA LOAD TESTING =====
  solana-bench-tps:
    image: solanalabs/solana:v1.16.0
    container_name: solana-bench-tps
    profiles: ["load-testing"]
    environment:
      - RUST_LOG=solana=info
    depends_on:
      - solana-validator
    networks:
      - sprint-network
    restart: "no"
    command: >
      bash -c "
      echo 'Solana Bench TPS Tool Ready'
      echo 'Run load tests with:'
      echo 'docker exec -it solana-bench-tps solana-bench-tps --entrypoint http://solana-validator:8899 --duration 60 --tx_count 1000'
      sleep infinity
      "

  # ===== CACHING & DATABASE LAYER =====
  redis:
    image: redis:7.2-alpine
    container_name: sprint-redis
    ports:
      - "6380:6379"     # Changed from 6379 to avoid local Redis conflict
    volumes:
      - redis-data:/data
    command: |
      redis-server
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    networks:
      - sprint-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: sprint-postgres
    ports:
      - "5433:5432"     # Changed from 5432 to avoid local PostgreSQL conflict
    environment:
      - POSTGRES_DB=sprint_db
      - POSTGRES_USER=sprint
      - POSTGRES_PASSWORD=sprint
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== MONITORING & OBSERVABILITY =====
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: sprint-prometheus
    ports:
      - "9090:9090"     # Standard Prometheus port
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== LOAD BALANCER & REVERSE PROXY =====
  nginx:
    image: nginx:1.25-alpine
    container_name: sprint-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - bitcoin-sprint
      - grafana
      - prometheus
      - bitcoin-sprint-web
    networks:
      - sprint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== ENTERPRISE SECURITY =====
  vault:
    image: vault:1.14.0
    container_name: sprint-vault
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=sprint-dev-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== MESSAGE QUEUE =====
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: sprint-rabbitmq
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=sprint
      - RABBITMQ_DEFAULT_PASS=sprint123
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== ELASTIC SEARCH & LOGGING =====
  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: sprint-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    networks:
      - sprint-network
    restart: unless-stopped

  kibana:
    image: kibana:8.9.0
    container_name: sprint-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - sprint-network
    restart: unless-stopped

  # ===== WEB DASHBOARD =====
  bitcoin-sprint-web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: bitcoin-sprint-web
    ports:
      - "3002:3002"     # Web Dashboard
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://bitcoin-sprint:8080/api
      - NEXT_PUBLIC_APP_ENV=production
      - DATABASE_URL=postgresql://sprint:sprint@postgres:5432/sprint_db
      - ADMIN_SECRET=bitcoin-sprint-admin-secret-2025-docker
      - GO_API_URL=http://bitcoin-sprint:8080
      - API_KEY=bitcoin-sprint-prod-key-2025
      - BITCOIN_RPC_URL=http://bitcoin-core:8332
      - BITCOIN_RPC_USER=sprint
      - BITCOIN_RPC_PASS=sprint_password_2025
    depends_on:
      - bitcoin-sprint
      - postgres
      - prometheus
    networks:
      - sprint-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
