package securechan // import "github.com/PayRpc/Bitcoin-Sprint/internal/securechan"

Package securechan provides secure channel communication with fallback
implementation for environments where CGO is not available. This package offers
the same API interface as the CGO version but with a pure Go implementation for
compatibility.

TYPES

type Channel struct {
	// Has unexported fields.
}
    Channel represents a secure communication channel with pure Go
    implementation

func NewChannel(endpoint string, config *ChannelConfig, logger *zap.Logger) (*Channel, error)
    NewChannel creates a new secure channel with pure Go implementation

func (c *Channel) Close() error
    Close properly releases all resources associated with the secure channel

func (c *Channel) GetEndpoint() string
    GetEndpoint returns the endpoint this channel is connected to

func (c *Channel) GetMetrics() ChannelMetrics
    GetMetrics returns a copy of the current channel metrics

func (c *Channel) GetState() ChannelState
    GetState returns the current state of the secure channel

func (c *Channel) IsConnected() bool
    IsConnected checks if the secure channel is currently connected

func (c *Channel) Receive(ctx context.Context, buffer []byte) (int, error)
    Receive reads data from the secure channel

func (c *Channel) Send(ctx context.Context, data []byte) (int, error)
    Send transmits data through the secure channel

func (c *Channel) Start(ctx context.Context) error
    Start initiates the secure channel connection with retry logic

func (c *Channel) Stop(ctx context.Context) error
    Stop gracefully shuts down the secure channel connection

type ChannelConfig struct {
	// Connection settings
	ConnectionTimeout time.Duration
	ReadTimeout       time.Duration
	WriteTimeout      time.Duration
	KeepAliveInterval time.Duration

	// Retry and error handling
	MaxRetries        int
	RetryDelay        time.Duration
	BackoffMultiplier float64
	MaxRetryDelay     time.Duration

	// Buffer and performance settings
	SendBufferSize    int
	ReceiveBufferSize int
	MaxMessageSize    int

	// Security settings
	EnableEncryption bool
	CertificatePath  string
	KeyPath          string

	// Monitoring
	EnableMetrics   bool
	MetricsInterval time.Duration
}
    ChannelConfig holds configuration parameters for secure channel operations

func DefaultChannelConfig() *ChannelConfig
    DefaultChannelConfig returns a production-ready configuration with
    enterprise defaults

type ChannelMetrics struct {
	ConnectionAttempts int64
	SuccessfulConnects int64
	FailedConnects     int64
	BytesSent          int64
	BytesReceived      int64
	ErrorCount         int64
	LastConnectionTime time.Time
	TotalUptime        time.Duration
	MaxLatency         time.Duration
	AverageLatency     time.Duration
}
    ChannelMetrics tracks performance and operational metrics for secure
    channels

type ChannelState int
    ChannelState represents the current state of a secure channel

const (
	StateDisconnected ChannelState = iota
	StateConnecting
	StateConnected
	StateError
	StateStopping
)
func (s ChannelState) String() string

type SecureChannelError struct {
	Operation string
	Endpoint  string
	Err       error
}
    SecureChannelError represents specific error types for secure channel
    operations

func (e *SecureChannelError) Error() string


