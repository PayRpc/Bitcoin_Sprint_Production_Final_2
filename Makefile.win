# Bitcoin Sprint Windows Makefile
# Optimized for Windows development with MSVC/clang-cl

# Windows-specific settings
CC = clang-cl
CXX = clang-cl
RUST_TARGET = x86_64-pc-windows-msvc
EXE_EXT = .exe
LIB_EXT = .dll

# Directories
RUST_DIR = secure\rust
GO_MAIN = cmd\sprintd
BUILD_DIR = build
EXAMPLES_DIR = examples

# Build flags
RUST_LIB = $(RUST_DIR)\target\release\securebuffer$(LIB_EXT)
CGO_CFLAGS = -I$(RUST_DIR)\include
CGO_LDFLAGS = -L$(RUST_DIR)\target\release -lsecurebuffer

# Version info
!IF "$(VERSION)" == ""
VERSION = dev
!ENDIF

!IF "$(COMMIT)" == ""
COMMIT = unknown
!ENDIF

GO_LDFLAGS = -X main.Version=$(VERSION) -X main.Commit=$(COMMIT)

# Targets
all: check rust go

help:
	@echo Bitcoin Sprint Windows Build System
	@echo ===================================
	@echo.
	@echo Targets:
	@echo   all       - Build everything
	@echo   rust      - Build Rust library
	@echo   go        - Build Go application
	@echo   clean     - Clean build artifacts
	@echo   test      - Run tests
	@echo   demo      - Build demo version
	@echo   p99bench  - Run p99 latency benchmarks
	@echo   p99server - Run p99 latency test server
	@echo.
	@echo Usage:
	@echo   nmake /f Makefile.win all
	@echo   nmake /f Makefile.win clean
	@echo   nmake /f Makefile.win p99bench

check:
	@echo Checking Windows build environment...
	@rustc --version
	@cargo --version  
	@go version
	@$(CC) --version
	@echo Environment ready!

	rust:
	@echo Building Rust SecureBuffer...
	@cd $(RUST_DIR) && cargo build --release --target $(RUST_TARGET)
	@echo Rust build completed!


go: rust
	@echo Building Go application...
	@if not exist $(BUILD_DIR) mkdir $(BUILD_DIR)
	@cd $(GO_MAIN) && set CGO_ENABLED=1 && set CGO_CFLAGS=$(CGO_CFLAGS) && set CGO_LDFLAGS=$(CGO_LDFLAGS) && set CC=$(CC) && go build -ldflags "$(GO_LDFLAGS)" -o ..\..\$(BUILD_DIR)\bitcoin-sprint$(EXE_EXT) .
	@echo Go build completed!


demo: rust
	@echo Building demo version...
	@if not exist $(BUILD_DIR) mkdir $(BUILD_DIR)
	@cd $(GO_MAIN) && set CGO_ENABLED=1 && set CGO_CFLAGS=$(CGO_CFLAGS) && set CGO_LDFLAGS=$(CGO_LDFLAGS) && set CC=$(CC) && go build -tags=demo -ldflags "$(GO_LDFLAGS) -X main.Version=$(VERSION)-demo" -o ..\..\$(BUILD_DIR)\bitcoin-sprint-demo$(EXE_EXT) .
	@echo Demo build completed!


test: rust
	@echo Running tests...
	@cd $(RUST_DIR) && cargo test
	@cd $(GO_MAIN) && set CGO_ENABLED=1 && set CGO_CFLAGS=$(CGO_CFLAGS) && set CGO_LDFLAGS=$(CGO_LDFLAGS) && set CC=$(CC) && go test -v .\...
	@echo Tests completed!


clean:
	@echo Cleaning build artifacts...
	@if exist $(BUILD_DIR) rmdir /s /q $(BUILD_DIR)
	@cd $(RUST_DIR) && cargo clean
	@cd $(GO_MAIN) && go clean
	@if exist bitcoin-sprint$(EXE_EXT) del bitcoin-sprint$(EXE_EXT)
	@if exist bitcoin-sprint-demo$(EXE_EXT) del bitcoin-sprint-demo$(EXE_EXT)
	@echo Clean completed!


install: all
	@echo Installing to Windows Apps...


# P99 Latency benchmark targets
p99bench:
	@echo Running p99 latency benchmarks...
	@if not exist bin mkdir bin
	@go build -o bin\p99_server.exe .\benchmark\latency\p99_server.go
	@powershell -ExecutionPolicy Bypass -File .\benchmark\latency\p99_benchmark.ps1
	@echo P99 benchmark complete!

p99server:
	@echo Starting p99 latency test server...
	@if not exist bin mkdir bin
	@go build -o bin\p99_server.exe .\benchmark\latency\p99_server.go
	@start /b bin\p99_server.exe -port 8765
	@echo P99 server started on port 8765
	@echo Try: http://localhost:8765/v1/latest

p99report:
	@echo Generating p99 latency report...
	@powershell -ExecutionPolicy Bypass -File .\benchmark\latency\run_and_update_report.ps1
	@echo Report generated at benchmark\latency\P99_LATENCY_REPORT.md

p99verify:
	@echo Verifying p99 implementation...
	@powershell -ExecutionPolicy Bypass -File .\scripts\verify_p99_implementation.ps1
	@echo Verification complete!
	@copy $(BUILD_DIR)\bitcoin-sprint$(EXE_EXT) %USERPROFILE%\AppData\Local\Microsoft\WindowsApps\
	@echo Installed!
