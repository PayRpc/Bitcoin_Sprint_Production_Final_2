# Bitcoin Core + Sprint Setup Script
# Downloads and configures Bitcoin Core with ZMQ for Sprint integration

param(
    [switch]$InstallBitcoinCore = $false,
    [switch]$StartBitcoinCore = $false,
    [switch]$StartSprint = $false,
    [string]$BitcoinVersion = "25.1"
)

# Configuration
$BitcoinUrl = "https://bitcoincore.org/bin/bitcoin-core-$BitcoinVersion/bitcoin-$BitcoinVersion-win64.zip"
$InstallPath = "$env:USERPROFILE\BitcoinCore"
$DataDir = "$env:APPDATA\Bitcoin"
$ConfigFile = "$DataDir\bitcoin.conf"

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Install-BitcoinCore {
    Write-ColorOutput "üîß Installing Bitcoin Core $BitcoinVersion..." "Cyan"

    # Create installation directory
    if (-not (Test-Path $InstallPath)) {
        New-Item -ItemType Directory -Path $InstallPath -Force | Out-Null
    }

    # Download Bitcoin Core
    $ZipFile = "$InstallPath\bitcoin-$BitcoinVersion-win64.zip"
    Write-ColorOutput "üì• Downloading Bitcoin Core..." "Info"

    try {
        Invoke-WebRequest -Uri $BitcoinUrl -OutFile $ZipFile -UseBasicParsing
        Write-ColorOutput "‚úÖ Download complete" "Success"
    }
    catch {
        Write-ColorOutput "‚ùå Download failed: $($_.Exception.Message)" "Error"
        return $false
    }

    # Extract Bitcoin Core
    Write-ColorOutput "üì¶ Extracting Bitcoin Core..." "Info"
    Expand-Archive -Path $ZipFile -DestinationPath $InstallPath -Force

    # Add to PATH
    $BinPath = "$InstallPath\bitcoin-$BitcoinVersion\bin"
    $CurrentPath = [Environment]::GetEnvironmentVariable("Path", "User")
    if ($CurrentPath -notlike "*$BinPath*") {
        [Environment]::SetEnvironmentVariable("Path", "$CurrentPath;$BinPath", "User")
        Write-ColorOutput "‚úÖ Added Bitcoin Core to PATH" "Success"
    }

    Write-ColorOutput "‚úÖ Bitcoin Core installed successfully!" "Success"
    Write-ColorOutput "   Location: $BinPath" "Info"
    return $true
}

function Configure-BitcoinCore {
    Write-ColorOutput "‚öôÔ∏è Configuring Bitcoin Core for Sprint..." "Cyan"

    # Create data directory
    if (-not (Test-Path $DataDir)) {
        New-Item -ItemType Directory -Path $DataDir -Force | Out-Null
    }

    # Create bitcoin.conf with ZMQ configuration
    $ConfigContent = @"
# Bitcoin Core Configuration for Sprint Integration
# Generated by setup script

# RPC Interface
server=1
rpcuser=sprint
rpcpassword=integration
rpcbind=127.0.0.1
rpcallowip=127.0.0.1
rpcthreads=4
rpctimeout=30

# ZeroMQ for Sprint
zmqpubhashblock=tcp://127.0.0.1:28332
zmqpubhashtx=tcp://127.0.0.1:28333
zmqpubrawblock=tcp://127.0.0.1:28334
zmqpubrawtx=tcp://127.0.0.1:28335

# Blockchain Storage
prune=550
txindex=0

# Networking
listen=1
discover=1
bind=0.0.0.0:8333
port=8333
maxconnections=64
maxuploadtarget=5000

# Performance
dbcache=2000
par=2
daemon=1

# Logging
debug=rpc
debug=net
debug=zmq
"@

    $ConfigContent | Out-File -FilePath $ConfigFile -Encoding ASCII -Force
    Write-ColorOutput "‚úÖ Bitcoin configuration created: $ConfigFile" "Success"

    # Display configuration
    Write-ColorOutput "`nüìã Bitcoin Core Configuration:" "Info"
    Write-ColorOutput "   RPC User: sprint" "Info"
    Write-ColorOutput "   RPC Password: integration" "Info"
    Write-ColorOutput "   ZMQ Block Port: 28332" "Info"
    Write-ColorOutput "   ZMQ TX Port: 28333" "Info"
    Write-ColorOutput "   Prune: 550MB" "Info"
    Write-ColorOutput "   Data Directory: $DataDir" "Info"
}

function Start-BitcoinCoreService {
    Write-ColorOutput "üöÄ Starting Bitcoin Core with ZMQ..." "Cyan"

    # Check if bitcoind is available
    $BitcoindPath = (Get-Command bitcoind -ErrorAction SilentlyContinue).Source
    if (-not $BitcoindPath) {
        $BitcoindPath = "$InstallPath\bitcoin-$BitcoinVersion\bin\bitcoind.exe"
    }

    if (-not (Test-Path $BitcoindPath)) {
        Write-ColorOutput "‚ùå bitcoind.exe not found at: $BitcoindPath" "Error"
        Write-ColorOutput "   Please install Bitcoin Core first or ensure it's in PATH" "Error"
        return $false
    }

    # Start Bitcoin Core
    Write-ColorOutput "   Executing: bitcoind.exe -server=1 -txindex=0 -prune=550 -rpcuser=sprint -rpcpassword=integration -zmqpubhashblock=tcp://127.0.0.1:28332" "Info"

    try {
        $Process = Start-Process -FilePath $BitcoindPath -ArgumentList "-server=1 -txindex=0 -prune=550 -rpcuser=sprint -rpcpassword=integration -zmqpubhashblock=tcp://127.0.0.1:28332" -NoNewWindow -PassThru

        Write-ColorOutput "‚úÖ Bitcoin Core started (PID: $($Process.Id))" "Success"
        Write-ColorOutput "   Waiting for initialization..." "Info"

        # Wait for Bitcoin Core to start
        Start-Sleep -Seconds 10

        # Check if it's running
        $BitcoinProcess = Get-Process | Where-Object { $_.Name -eq "bitcoind" }
        if ($BitcoinProcess) {
            Write-ColorOutput "‚úÖ Bitcoin Core is running" "Success"
            Write-ColorOutput "   Process ID: $($BitcoinProcess.Id)" "Info"
            Write-ColorOutput "   CPU Usage: $($BitcoinProcess.CPU.ToString("F2"))%" "Info"
            Write-ColorOutput "   Memory: $([math]::Round($BitcoinProcess.WorkingSet64 / 1MB, 2)) MB" "Info"

            # Test RPC connection
            Write-ColorOutput "`nüîç Testing Bitcoin Core RPC..." "Info"
            try {
                $RpcTest = & $BitcoindPath getblockchaininfo 2>$null
                if ($LASTEXITCODE -eq 0) {
                    Write-ColorOutput "‚úÖ RPC connection successful" "Success"
                } else {
                    Write-ColorOutput "‚ö†Ô∏è RPC connection may need more time to initialize" "Warning"
                }
            }
            catch {
                Write-ColorOutput "‚ö†Ô∏è RPC test failed (normal during initial sync)" "Warning"
            }

            return $true
        } else {
            Write-ColorOutput "‚ùå Bitcoin Core failed to start" "Error"
            return $false
        }
    }
    catch {
        Write-ColorOutput "‚ùå Failed to start Bitcoin Core: $($_.Exception.Message)" "Error"
        return $false
    }
}

function Start-SprintService {
    Write-ColorOutput "üöÄ Starting Bitcoin Sprint with ZMQ backend..." "Cyan"

    # Set environment variables
    $env:SPRINT_TIER = "turbo"
    $env:PEER_HMAC_SECRET = "testsecret"
    $env:LICENSE_KEY = "testlicense"
    $env:ZMQ_ENDPOINT = "tcp://127.0.0.1:28332"
    $env:API_PORT = "9090"

    Write-ColorOutput "üìã Environment Variables:" "Info"
    Write-ColorOutput "   SPRINT_TIER: $env:SPRINT_TIER" "Info"
    Write-ColorOutput "   ZMQ_ENDPOINT: $env:ZMQ_ENDPOINT" "Info"
    Write-ColorOutput "   API_PORT: $env:API_PORT" "Info"
    Write-ColorOutput "   LICENSE_KEY: [SET]" "Info"

    # Build Sprint if needed
    Write-ColorOutput "`nüî® Building Sprint with ZMQ support..." "Info"
    try {
        Push-Location
        Set-Location "cmd\sprintd"
        & go build -o ..\..\sprintd.exe .
        Pop-Location

        if (Test-Path "sprintd.exe") {
            Write-ColorOutput "‚úÖ Sprint built successfully" "Success"
        } else {
            Write-ColorOutput "‚ùå Sprint build failed" "Error"
            return $false
        }
    }
    catch {
        Write-ColorOutput "‚ùå Build error: $($_.Exception.Message)" "Error"
        return $false
    }

    # Start Sprint
    Write-ColorOutput "`nüöÄ Starting Sprint daemon..." "Info"
    try {
        $SprintProcess = Start-Process -FilePath ".\sprintd.exe" -NoNewWindow -PassThru

        Write-ColorOutput "‚úÖ Sprint started (PID: $($SprintProcess.Id))" "Success"
        Write-ColorOutput "   Waiting for initialization..." "Info"

        # Wait for Sprint to start
        Start-Sleep -Seconds 5

        # Test Sprint API
        Write-ColorOutput "`nüîç Testing Sprint API..." "Info"
        try {
            $StatusResponse = Invoke-WebRequest -Uri "http://localhost:9090/status" -UseBasicParsing -TimeoutSec 10
            if ($StatusResponse.StatusCode -eq 200) {
                Write-ColorOutput "‚úÖ Sprint API responding" "Success"
                $StatusData = $StatusResponse.Content | ConvertFrom-Json
                Write-ColorOutput "   Status: $($StatusData.status)" "Info"
            }
        }
        catch {
            Write-ColorOutput "‚ö†Ô∏è Sprint API not ready yet (normal during startup)" "Warning"
        }

        try {
            $TurboResponse = Invoke-WebRequest -Uri "http://localhost:9090/turbo-status" -UseBasicParsing -TimeoutSec 10
            if ($TurboResponse.StatusCode -eq 200) {
                Write-ColorOutput "‚úÖ Sprint Turbo Status available" "Success"
                $TurboData = $TurboResponse.Content | ConvertFrom-Json
                Write-ColorOutput "   Tier: $($TurboData.tier)" "Info"
                Write-ColorOutput "   Connected Peers: $($TurboData.systemMetrics.connectedPeers)" "Info"
            }
        }
        catch {
            Write-ColorOutput "‚ö†Ô∏è Turbo status not available yet" "Warning"
        }

        return $true
    }
    catch {
        Write-ColorOutput "‚ùå Failed to start Sprint: $($_.Exception.Message)" "Error"
        return $false
    }
}

function Show-Status {
    Write-ColorOutput "`nüìä Current Status" "Header"
    Write-ColorOutput "=" * 50 "Header"

    # Check Bitcoin Core
    $BitcoinProcess = Get-Process | Where-Object { $_.Name -eq "bitcoind" }
    if ($BitcoinProcess) {
        Write-ColorOutput "‚úÖ Bitcoin Core: RUNNING (PID: $($BitcoinProcess.Id))" "Success"
    } else {
        Write-ColorOutput "‚ùå Bitcoin Core: NOT RUNNING" "Error"
    }

    # Check Sprint
    $SprintProcess = Get-Process | Where-Object { $_.Name -eq "sprintd" }
    if ($SprintProcess) {
        Write-ColorOutput "‚úÖ Bitcoin Sprint: RUNNING (PID: $($SprintProcess.Id))" "Success"
    } else {
        Write-ColorOutput "‚ùå Bitcoin Sprint: NOT RUNNING" "Error"
    }

    # Test connections
    Write-ColorOutput "`nüîç Connection Tests:" "Info"

    # Test Bitcoin RPC
    try {
        $RpcTest = Invoke-WebRequest -Uri "http://127.0.0.1:8332" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        Write-ColorOutput "‚úÖ Bitcoin RPC: CONNECTED" "Success"
    }
    catch {
        Write-ColorOutput "‚ùå Bitcoin RPC: NOT CONNECTED" "Error"
    }

    # Test Sprint API
    try {
        $ApiTest = Invoke-WebRequest -Uri "http://localhost:9090/status" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        Write-ColorOutput "‚úÖ Sprint API: CONNECTED" "Success"
    }
    catch {
        Write-ColorOutput "‚ùå Sprint API: NOT CONNECTED" "Error"
    }

    # Test ZMQ (if Bitcoin is running)
    if ($BitcoinProcess) {
        Write-ColorOutput "‚úÖ ZMQ: CONFIGURED (tcp://127.0.0.1:28332)" "Success"
    }
}

# Main execution
Write-ColorOutput "üîß Bitcoin Core + Sprint Setup Utility" "Header"
Write-ColorOutput "=" * 50 "Header"

if ($InstallBitcoinCore) {
    $InstallResult = Install-BitcoinCore
    if (-not $InstallResult) {
        exit 1
    }
    Configure-BitcoinCore
}

if ($StartBitcoinCore) {
    Configure-BitcoinCore  # Ensure config exists
    $BitcoinResult = Start-BitcoinCoreService
    if (-not $BitcoinResult) {
        Write-ColorOutput "‚ùå Bitcoin Core startup failed" "Error"
        exit 1
    }
}

if ($StartSprint) {
    $SprintResult = Start-SprintService
    if (-not $SprintResult) {
        Write-ColorOutput "‚ùå Sprint startup failed" "Error"
        exit 1
    }
}

# Show final status
Show-Status

# Display next steps
Write-ColorOutput "`nüöÄ Next Steps:" "Info"
Write-ColorOutput "1. Wait for Bitcoin Core to sync (may take time on first run)" "Info"
Write-ColorOutput "2. Run real data query tests: .\real-data-query-test.ps1" "Info"
Write-ColorOutput "3. Monitor performance: http://localhost:9090/turbo-status" "Info"
Write-ColorOutput "4. View logs and manage via web dashboard" "Info"

Write-ColorOutput "`n‚úÖ Setup complete! Sprint should now work with real Bitcoin data." "Success"
