# Bitcoin Sprint CI/CD Strategy & Implementation
# Enterprise-grade CI/CD pipeline for blockchain infrastructure

name: Complete CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version tag (leave empty for auto)'
        required: false
        type: string

env:
  GO_VERSION: '1.23'
  RUST_VERSION: 'stable'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== CODE QUALITY & SECURITY =====
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run Go Security Scan
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './...'

      - name: Run Go Vulnerability Check
        run: go install golang.org/x/vuln/cmd/govulncheck@latest && govulncheck ./...

      - name: Run Rust Security Audit
        uses: actions-rs/audit@v1
        if: hashFiles('**/Cargo.toml') != ''
        with:
          working-directory: ./secure/rust

      - name: Run Static Analysis
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_GO: true
          VALIDATE_RUST: true
          VALIDATE_DOCKERFILE: true
          VALIDATE_YAML: true

  # ===== UNIT & INTEGRATION TESTS =====
  test:
    name: Test Suite (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            test-flags: '-race -coverprofile=coverage.out'
          - os: windows-latest
            test-flags: '-coverprofile=coverage.out'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: sprint_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-deps-${{ hashFiles('**/go.sum', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Build Rust Dependencies
        if: hashFiles('secure/rust/Cargo.toml') != ''
        working-directory: secure/rust
        run: cargo build --release

      - name: Run Unit Tests
        env:
          CGO_ENABLED: 1
          DATABASE_URL: postgres://postgres:test@localhost:5432/sprint_test
        run: go test ${{ matrix.test-flags }} ./... -tags=nozmq -timeout=10m

      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: ${{ matrix.os }}

  # ===== DOCKER BUILD & SCAN =====
  docker:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          build-args: |
            BUILD_VERSION=${{ github.ref_name }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===== PERFORMANCE & LOAD TESTING =====
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Benchmarks
        run: |
          go test -bench=. -benchmem ./... > benchmarks.txt
          cat benchmarks.txt

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmarks.txt

      - name: Compare Benchmarks
        uses: benchmark-action/github-action-benchmark@v1
        if: github.event_name == 'push'
        with:
          name: Go Benchmark
          tool: 'go'
          output-file-path: benchmarks.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # ===== DEPLOYMENT =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Deploy to Fly.io Staging
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy Application
        run: flyctl deploy --config fly.toml --env staging
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')
    environment: production

    steps:
      - name: Deploy to Fly.io Production
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy Application
        run: flyctl deploy --config fly.toml --env production
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes
            ${{ github.event.head_commit.message }}

            ## Docker Image
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}`

          draft: false
          prerelease: false

  # ===== RELEASE & TAGGING =====
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Changelog
        uses: tj-actions/git-cliff@v1
        id: git-cliff
        with:
          configuration: cliff.toml
          args: --verbose --latest --strip header
        env:
          OUTPUT: CHANGELOG.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.git-cliff.outputs.content }}
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
